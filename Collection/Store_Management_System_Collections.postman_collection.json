{
	"info": {
		"_postman_id": "7b05a0c0-8d84-4ae9-89bb-30054d535b18",
		"name": "Store_Management_System_Collections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46763324",
		"_collection_link": "https://gold-robot-3070368.postman.co/workspace/Md.-Aminul-Islam's-Workspace~85fe5b2b-35f5-4c6e-8ec4-625f56db4d81/collection/46763324-7b05a0c0-8d84-4ae9-89bb-30054d535b18?action=share&source=collection_link&creator=46763324"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "GET All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Product Id\r",
									"var jsonData = pm.response.json()\r",
									"pm.environment.set(\"productId\", jsonData.id)\r",
									"\r",
									"//Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Response contains product ID\r",
									"pm.test(\"Response contains product ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData).to.have.property(\"stock\");\r",
									"    pm.expect(jsonData).to.have.property(\"category\");\r",
									"    pm.expect(jsonData).to.have.property(\"brand\");\r",
									"    pm.expect(jsonData).to.have.property(\"rating\");\r",
									"    pm.expect(jsonData).to.have.property(\"sku\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"});\r",
									"//Validate field values match request\r",
									"pm.test(\"Product values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.price).to.eql(reqBody.price);\r",
									"    pm.expect(jsonData.description).to.eql(reqBody.description);\r",
									"    pm.expect(jsonData.stock).to.eql(reqBody.stock);\r",
									"    pm.expect(jsonData.category).to.eql(reqBody.category);\r",
									"    pm.expect(jsonData.brand).to.eql(reqBody.brand);\r",
									"    pm.expect(jsonData.rating).to.eql(reqBody.rating);\r",
									"    pm.expect(jsonData.sku).to.eql(reqBody.sku);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"iPhone 16 Pro\",\r\n        \"price\": 999,\r\n        \"description\": \"Apple Product\",\r\n        \"stock\": -11,\r\n        \"category\": \"Electronics\",\r\n        \"brand\": \"Brand A\",\r\n        \"rating\": 4.8,\r\n        \"sku\": \"P001\",\r\n        \"created_at\": \"2025-01-01\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  var jsonData = pm.response.json();\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData).to.have.property(\"stock\");\r",
									"    pm.expect(jsonData).to.have.property(\"category\");\r",
									"    pm.expect(jsonData).to.have.property(\"brand\");\r",
									"    pm.expect(jsonData).to.have.property(\"rating\");\r",
									"    pm.expect(jsonData).to.have.property(\"sku\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"});\r",
									"\r",
									"//Validate field values match request\r",
									"pm.test(\"Product values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.price).to.eql(reqBody.price);\r",
									"    pm.expect(jsonData.description).to.eql(reqBody.description);\r",
									"    pm.expect(jsonData.stock).to.eql(reqBody.stock);\r",
									"    pm.expect(jsonData.category).to.eql(reqBody.category);\r",
									"    pm.expect(jsonData.brand).to.eql(reqBody.brand);\r",
									"    pm.expect(jsonData.rating).to.eql(reqBody.rating);\r",
									"    pm.expect(jsonData.sku).to.eql(reqBody.sku);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"iPhone 17 Pro\",\r\n        \"price\": 1199,\r\n        \"description\": \"Apple Product\",\r\n        \"stock\": 1,\r\n        \"category\": \"Electronics\",\r\n        \"brand\": \"Brand A\",\r\n        \"rating\": 4.8,\r\n        \"sku\": \"P001\",\r\n        \"created_at\": \"2025-01-01\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Creating Last Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "GET All Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Categories Id\r",
									"var jsonData = pm.response.json()\r",
									"pm.environment.set(\"categorieId\", jsonData.id)\r",
									"\r",
									"//Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Response contains categorie ID\r",
									"pm.test(\"Response contains categorie ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"    pm.expect(jsonData).to.have.property(\"updated_at\");\r",
									"});\r",
									"//Validate field values match request\r",
									"pm.test(\"Categorie values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.description).to.eql(reqBody.description);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"    pm.expect(jsonData.update_at).to.eql(reqBody.update_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n      \"name\": \"Electronics\",\r\n      \"description\": \"Devices, gadgets, and tech products\",\r\n      \"created_at\": \"2025-01-01\",\r\n      \"updated_at\": \"2025-01-05\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () { \r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"description\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"    pm.expect(jsonData).to.have.property(\"updated_at\");\r",
									"});\r",
									"\r",
									"//Validate field values match request\r",
									"pm.test(\"Categorie values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.description).to.eql(reqBody.description);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"    pm.expect(jsonData.update_at).to.eql(reqBody.update_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n      \"name\": \"Electronics\",\r\n      \"description\": \"Devices, gadgets, and tech products\",\r\n      \"created_at\": \"2025-01-01\",\r\n      \"updated_at\": \"2025-01-05\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/{{categorieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"{{categorieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Creating Last Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n      \"name\": \"Electronics\",\r\n      \"description\": \"Devices, gadgets, and tech products\",\r\n      \"created_at\": \"2025-01-01\",\r\n      \"updated_at\": \"2025-01-05\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories/{{categorieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"{{categorieId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customers",
			"item": [
				{
					"name": "GET All Customers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Customer Id\r",
									"var jsonData = pm.response.json()\r",
									"pm.environment.set(\"customerId\", jsonData.id)\r",
									"\r",
									"//Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Response contains Customer ID\r",
									"pm.test(\"Response contains customer ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"address\");\r",
									"    pm.expect(jsonData).to.have.property(\"phone\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"orders_count\");\r",
									"    pm.expect(jsonData).to.have.property(\"total_spent\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"    pm.expect(jsonData).to.have.property(\"updated_at\");\r",
									"});\r",
									"//Validate field values match request\r",
									"pm.test(\"Customer values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.email).to.eql(reqBody.email);\r",
									"    pm.expect(jsonData.address).to.eql(reqBody.address);\r",
									"    pm.expect(jsonData.phone).to.eql(reqBody.phone);\r",
									"    pm.expect(jsonData.status).to.eql(reqBody.status);\r",
									"    pm.expect(jsonData.orders_count).to.eql(reqBody.orders_count);\r",
									"    pm.expect(jsonData.total_spent).to.eql(reqBody.total_spent);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"      pm.expect(jsonData.updated_at).to.eql(reqBody.updated_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"name\": \"Mograb\",\r\n        \"email\": \"xyz@example.com\",\r\n        \"address\": \"123 Main St, City A\",\r\n        \"phone\": \"123-456-7890\",\r\n        \"created_at\": \"2025-01-01\",\r\n        \"updated_at\": \"2025-01-10\",\r\n        \"status\": \"Active\",\r\n        \"orders_count\": 5,\r\n        \"total_spent\": 500\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  var jsonData = pm.response.json();\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"address\");\r",
									"    pm.expect(jsonData).to.have.property(\"phone\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"orders_count\");\r",
									"    pm.expect(jsonData).to.have.property(\"total_spent\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"     pm.expect(jsonData).to.have.property(\"updated_at\");\r",
									"});\r",
									"\r",
									"//Validate field values match request\r",
									"pm.test(\"Customer values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
									"    pm.expect(jsonData.email).to.eql(reqBody.email);\r",
									"    pm.expect(jsonData.address).to.eql(reqBody.address);\r",
									"    pm.expect(jsonData.phone).to.eql(reqBody.phone);\r",
									"    pm.expect(jsonData.status).to.eql(reqBody.status);\r",
									"    pm.expect(jsonData.orders_count).to.eql(reqBody.orders_count);\r",
									"    pm.expect(jsonData.total_spent).to.eql(reqBody.total_spent);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"    pm.expect(jsonData.updated_at).to.eql(reqBody.updated_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Mograb\",\r\n        \"email\": \"xyz@example.com\",\r\n        \"address\": \"123 Main St, City A\",\r\n        \"phone\": \"123-456-7890\",\r\n        \"created_at\": \"2025-01-01\",\r\n        \"updated_at\": \"2025-01-10\",\r\n        \"status\": \"Active\",\r\n        \"orders_count\": 5,\r\n        \"total_spent\": 500\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Creating Last Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customers/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "GET All Orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Order Id\r",
									"var jsonData = pm.response.json()\r",
									"pm.environment.set(\"orderId\", jsonData.id)\r",
									"\r",
									"//Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Response contains Order ID\r",
									"pm.test(\"Response contains order ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"order_number\");\r",
									"    pm.expect(jsonData).to.have.property(\"customer_id\");\r",
									"    pm.expect(jsonData).to.have.property(\"order_date\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"total_amount\");\r",
									"    pm.expect(jsonData).to.have.property(\"payment_method\");\r",
									"    pm.expect(jsonData).to.have.property(\"shipping_address\");\r",
									"    pm.expect(jsonData).to.have.property(\"billing_address\");\r",
									"     pm.expect(jsonData).to.have.property(\"items_count\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"});\r",
									"//Validate field values match request\r",
									"pm.test(\"Order values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.order_number).to.eql(reqBody.order_number);\r",
									"    pm.expect(jsonData.customer_id).to.eql(reqBody.customer_id);\r",
									"    pm.expect(jsonData.order_date).to.eql(reqBody.order_date);\r",
									"    pm.expect(jsonData.status).to.eql(reqBody.status);\r",
									"    pm.expect(jsonData.total_amount).to.eql(reqBody.total_amount);\r",
									"    pm.expect(jsonData.payment_method).to.eql(reqBody.payment_method);\r",
									"    pm.expect(jsonData.shipping_address).to.eql(reqBody.shipping_address);\r",
									"    pm.expect(jsonData.billing_address).to.eql(reqBody.billing_address);\r",
									"    pm.expect(jsonData.items_count).to.eql(reqBody.items_count);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"order_number\": \"ORD001\",\r\n        \"customer_id\": 1,\r\n        \"order_date\": \"2025-01-01\",\r\n        \"status\": \"Shipped\",\r\n        \"total_amount\": 150,\r\n        \"payment_method\": \"Credit Card\",\r\n        \"shipping_address\": \"123 Main St, City A\",\r\n        \"billing_address\": \"123 Main St, City A\",\r\n        \"items_count\": 2,\r\n        \"created_at\": \"2025-01-01\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  var jsonData = pm.response.json();\r",
									"//Response has all required fields\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"order_number\");\r",
									"    pm.expect(jsonData).to.have.property(\"customer_id\");\r",
									"    pm.expect(jsonData).to.have.property(\"order_date\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"total_amount\");\r",
									"    pm.expect(jsonData).to.have.property(\"payment_method\");\r",
									"    pm.expect(jsonData).to.have.property(\"shipping_address\");\r",
									"    pm.expect(jsonData).to.have.property(\"billing_address\");\r",
									"    pm.expect(jsonData).to.have.property(\"items_count\");\r",
									"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
									"});\r",
									"\r",
									"//Validate field values match request\r",
									"pm.test(\"Order values match request\", function () {\r",
									"    let reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.expect(jsonData.order_number).to.eql(reqBody.order_number);\r",
									"    pm.expect(jsonData.customer_id).to.eql(reqBody.customer_id);\r",
									"    pm.expect(jsonData.order_date).to.eql(reqBody.order_date);\r",
									"    pm.expect(jsonData.status).to.eql(reqBody.status);\r",
									"    pm.expect(jsonData.total_amount).to.eql(reqBody.total_amount);\r",
									"    pm.expect(jsonData.payment_method).to.eql(reqBody.payment_method);\r",
									"    pm.expect(jsonData.shipping_address).to.eql(reqBody.shipping_address);\r",
									"    pm.expect(jsonData.billing_address).to.eql(reqBody.billing_address);\r",
									"    pm.expect(jsonData.items_count).to.eql(reqBody.items_count);\r",
									"    pm.expect(jsonData.created_at).to.eql(reqBody.created_at);\r",
									"});\r",
									"//Ensure no unexpected error messages\r",
									"pm.test(\"No error message in response\", function () {\r",
									"    pm.expect(JSON.stringify(jsonData)).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"order_number\": \"ORD001\",\r\n        \"customer_id\": 1,\r\n        \"order_date\": \"2025-01-01\",\r\n        \"status\": \"Shipped\",\r\n        \"total_amount\": 150,\r\n        \"payment_method\": \"Credit Card\",\r\n        \"shipping_address\": \"123 Main St, City A\",\r\n        \"billing_address\": \"123 Main St, City A\",\r\n        \"items_count\": 2,\r\n        \"created_at\": \"2025-01-01\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Creating Last Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}